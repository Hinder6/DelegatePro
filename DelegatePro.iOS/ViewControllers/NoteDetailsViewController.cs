// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using DelegatePro.PCL;
using Foundation;
using UIKit;

namespace DelegatePro.iOS
{
    public partial class NoteDetailsViewController : BaseViewController,
        IUITableViewDelegate,
        IUITableViewDataSource
	{
        enum Rows
        {
            Title = 0,
            Text,
            Addressed,
            Visibility,
            Case,
            ParentNote
        }

        public Note CurrentNote { get; set; }

        public string NoteTitle
        {
            get { return CurrentNote.Title; }
            set { CurrentNote.Title = value; }
        }

        public string NoteText
        {
            get { return CurrentNote.Text; }
            set { CurrentNote.Text = value; }
        }

        public event EventHandler NoteSaved;
        private void OnNoteSaved()
        {
            NoteSaved?.Invoke(this, EventArgs.Empty);
        }

        private UIBarButtonItem _saveButton;

		public NoteDetailsViewController (IntPtr handle) : base (handle)
		{
		}

        public override async void ViewDidLoad()
        {
            base.ViewDidLoad();

            if (CurrentNote.ID != Guid.Empty)
            {
                ShowWaitDialog("Getting Note...");
                var response = await Note.GetNote(CurrentNote.ID);
                DismissWaitDialog();

                if (response.Result)
                    CurrentNote = response.Data;
            }
            
            DetailsTableView.TableFooterView = new UIView(CGRect.Empty);
            DetailsTableView.WeakDataSource = this;
            DetailsTableView.WeakDelegate = this;
            DetailsTableView.EstimatedRowHeight = UITableView.AutomaticDimension;
            DetailsTableView.ReloadData();

            _saveButton = new UIBarButtonItem(UIBarButtonSystemItem.Save, SaveNote);
            NavigationItem.RightBarButtonItem = _saveButton;
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            Title = "Note Details";
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            Title = string.Empty;

            if (segue.Identifier == Segues.SegueToCaseSelection)
            {
                var caseVC = (CaseSelectionViewController)segue.DestinationViewController;
                if (CurrentNote.CaseID.HasValue)
                    caseVC.SelectedCaseID = CurrentNote.CaseID.Value;
                caseVC.CaseSelected += CaseVC_CaseSelected;
            }
            else if (segue.Identifier == Segues.SegueToParentNoteSelection)
            {
                var noteVC = (ParentNoteSelectionViewController)segue.DestinationViewController;
                if (CurrentNote.ParentNoteID.HasValue)
                    noteVC.SelectedNoteID = CurrentNote.ParentNoteID.Value;
                noteVC.ChildNoteID = CurrentNote.ID;
                noteVC.NoteSelected += NoteVC_NoteSelected;
            }
            else if (segue.Identifier == Segues.SegueToVisibilitySelection)
            {
                var visVC = (VisibilitySelectionViewController)segue.DestinationViewController;
                visVC.SelectedVisibility = CurrentNote.Visibility;
                visVC.VisibilitySelected += VisVC_VisibilitySelected;
            }
        }

        private void CaseVC_CaseSelected(object sender, EventArgs e)
        {
            var caseVC = (CaseSelectionViewController)sender;
            caseVC.CaseSelected -= CaseVC_CaseSelected;

            CurrentNote.CaseID = caseVC.SelectedCaseID;

            ReloadRow(Rows.Case);
        }

        private void NoteVC_NoteSelected(object sender, EventArgs e)
        {
            var noteVC = (ParentNoteSelectionViewController)sender;
            noteVC.NoteSelected -= NoteVC_NoteSelected;

            CurrentNote.ParentNoteID = noteVC.SelectedNoteID;

            ReloadRow(Rows.ParentNote);
        }

        private void VisVC_VisibilitySelected(object sender, EventArgs e)
        {
            var visVC = (VisibilitySelectionViewController)sender;
            visVC.VisibilitySelected -= VisVC_VisibilitySelected;

            CurrentNote.Visibility = visVC.SelectedVisibility;

            ReloadRow(Rows.Visibility);
        }

        private async void SaveNote(object sender, EventArgs e)
        {
            ShowWaitDialog("Saving Note...");
            var response = await CurrentNote.SaveAsync();
            DismissWaitDialog();

            if (!response.Result)
            {
                ShowError("Error", response.Message);
                return;
            }

            OnNoteSaved();
            this.NavigationController.PopViewController(true);
        }

        private void ReloadRow(Rows row)
        {
            DetailsTableView.ReloadRows(new NSIndexPath[] { NSIndexPath.FromRowSection((int)row, 0) }, UITableViewRowAnimation.None);
        }

        #region TableView Overrides

        [Export("tableView:heightForRowAtIndexPath:")]
        public nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath)
        {
            if (indexPath.Row == (int)Rows.Text)
                return 117f;

            return UITableView.AutomaticDimension;
        }

        [Export("numberOfSectionsInTableView:")]
        public nint NumberOfSections(UITableView tableView)
        {
            return 1;
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            switch(indexPath.Row)
            {
                case (int)Rows.Addressed:
                    return SwitchCell.Dequeue(this, tableView, Constants.Note.AddressedText, CurrentNote.IsAddressed);
                case (int)Rows.Case:
                    return SelectionCell.Dequeue(tableView, Constants.Note.CaseLabelText, CurrentNote.CaseDisplay, CurrentNote.CaseDisplayColor.AsUIColor());
                case (int)Rows.ParentNote:
                    return SelectionCell.Dequeue(tableView, Constants.Note.ChildNoteText, CurrentNote.ParentNoteDisplay, CurrentNote.ParentNoteDisplayColor.AsUIColor());
                case (int)Rows.Text:
                    return MultiLineEntryCell.Dequeue(this, tableView, Constants.Note.TextViewText, this.NoteText);
                case (int)Rows.Title:
                    return EntryTextCell.Dequeue(this, tableView, Constants.Note.TitleText, this.NoteTitle);
                case (int)Rows.Visibility:
                    return SelectionCell.Dequeue(tableView, Constants.Note.VisibilityText, CurrentNote.VisibilityDisplay, CurrentNote.VisibilityDisplayColor.AsUIColor());
                default:
                    return null;
            }
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return 6;
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            this.View.EndEditing(true);
            var segue = string.Empty;

            switch(indexPath.Row)
            {
                case (int)Rows.Case:
                    segue = Segues.SegueToCaseSelection;
                    break;
                case (int)Rows.ParentNote:
                    segue = Segues.SegueToParentNoteSelection;
                    break;
                case (int)Rows.Visibility:
                    segue = Segues.SegueToVisibilitySelection;
                    break;
                default:
                    break;
            }

            if (!string.IsNullOrEmpty(segue))
                PerformSegue(segue, null);
        }

        #endregion

        public void UpdateAddressed(bool isAddressed)
        {
            CurrentNote.SetAddressed(isAddressed);
        }
	}
}
