// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CoreGraphics;
using DelegatePro.PCL;
using Foundation;
using UIKit;

namespace DelegatePro.iOS
{
    public partial class NotesListViewController : BaseViewController,
        IUITableViewDelegate,
        IUITableViewDataSource
	{
        private List<Note> _notes;
        private bool _isAddingNote;
        private Note _selectedNote;
        private UIBarButtonItem _addButton;

		public NotesListViewController (IntPtr handle) : base (handle)
		{
		}

        public override async void ViewDidLoad()
        {
            base.ViewDidLoad();

            await LoadNotes();

            NotesTableView.WeakDelegate = this;
            NotesTableView.WeakDataSource = this;
            NotesTableView.EstimatedRowHeight = UITableView.AutomaticDimension;
            NotesTableView.TableFooterView = new UIView(CGRect.Empty);
            NotesTableView.ReloadData();
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            this.TabBarController.NavigationItem.Title = Constants.Note.ViewTitle;

            if (_addButton == null)
                _addButton = new UIBarButtonItem(UIBarButtonSystemItem.Add, AddNote);

            this.TabBarController.NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { _addButton };
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == Segues.SegueToNoteDetails)
            {
                var noteVC = (NoteDetailsViewController)segue.DestinationViewController;
                noteVC.CurrentNote = (_isAddingNote) ? new Note() : _selectedNote;
                noteVC.NoteSaved += NoteSaved;
            }
        }

        private async Task LoadNotes()
        {
            ShowWaitDialog("Getting notes...");
            var response = await Note.GetNotesAsync();
            DismissWaitDialog();

            if (!response.Result)
            {
                ShowError("Error", response.Message);
                return;
            }

            _notes = response.Data;
        }

        private async void NoteSaved(object sender, EventArgs e)
        {
            var noteVC = (NoteDetailsViewController)sender;
            noteVC.NoteSaved -= NoteSaved;

            await LoadNotes();
            NotesTableView.ReloadData();
        }

        private void AddNote(object sender, EventArgs e)
        {
            _isAddingNote = true;
            _selectedNote = null;
            PerformSegue(Segues.SegueToNoteDetails, null);
        }

        [Export("numberOfSectionsInTableView:")]
        public nint NumberOfSections(UITableView tableView)
        {
            return 1;
        }

        private static string CellIdentifier = "cell";
        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var note = _notes[indexPath.Row];
            return NotesTableViewCell.Dequeue(tableView, note.ToString(), note.IsAddressed);
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return _notes.Count;
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            tableView.DeselectRow(indexPath, true);
            _isAddingNote = false;
            _selectedNote = _notes[indexPath.Row];
            PerformSegue(Segues.SegueToNoteDetails, null);
        }

        [Export("tableView:canEditRowAtIndexPath:")]
        public bool CanEditRow(UITableView tableView, NSIndexPath indexPath)
        {
            return true;
        }

        [Export("tableView:commitEditingStyle:forRowAtIndexPath:")]
        public async void CommitEditingStyle(UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath)
        {
            if (editingStyle == UITableViewCellEditingStyle.Delete)
            {
                var delete = await ShowYesNoMessage(Constants.Note.DeleteNoteTitleText, Constants.Note.DeleteNoteMessage);
                if (!delete)
                    return;

                var note = _notes[indexPath.Row];

                var response = await note.DeleteAsync();
                if (!response.Result)
                {
                    ShowError("Error", response.Message);
                    return;
                }

                _notes.Remove(note);
                tableView.ReloadData();
            }
        }
	}
}
