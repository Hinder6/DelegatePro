// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using CoreGraphics;
using DelegatePro.PCL;
using Foundation;
using UIKit;

namespace DelegatePro.iOS
{
    public partial class PersonDetailViewController : BaseViewController,
        IUITableViewDelegate,
        IUITableViewDataSource
	{
        private enum DetailRows
        {
            FirstName = 0,
            LastName,
            Email,
            CellPhone,
            HomePhone,
            Type
        }

        private NSObject _keyboardShowObserver;
        private NSObject _keyboardHideObserver;

        private UIBarButtonItem _saveButtonItem;

        public Case CurrentCase { get; set; }
        public CasePOI CurrentPerson { get; set; } // used for editing a POI already on the case
        public POI CurrentNewPerson { get; set; } = new POI();

        public POI ExistingOrgPerson { get; set; } = new POI();

        private bool _isNew = false;

        private bool IsFromCase
        {
            get { return CurrentCase != null; }
        }

        public string FirstName
        {
            get 
            {
                if (IsFromCase)
                    return CurrentPerson.POI.FirstName;
                else
                    return (!_isNew) ? ExistingOrgPerson.FirstName : string.Empty;
            }
            set
            {
                POI poi = null;
                if (IsFromCase)
                    poi = CurrentPerson.POI;
                else
                    poi = (_isNew) ? CurrentNewPerson : ExistingOrgPerson;
                
                poi.FirstName = value;
            }
        }

        public string LastName
        {
            get
            {
                if (IsFromCase)
                    return CurrentPerson.POI.LastName;
                else
                    return (!_isNew) ? ExistingOrgPerson.LastName : string.Empty;
            }
            set
            {
                POI poi = null;
                if (IsFromCase)
                    poi = CurrentPerson.POI;
                else
                    poi = (_isNew) ? CurrentNewPerson : ExistingOrgPerson;

                poi.LastName = value;
            }
        }

        public string Email
        {
            get
            {
                if (IsFromCase)
                    return CurrentPerson.POI.Email;
                else
                    return (!_isNew) ? ExistingOrgPerson.Email : string.Empty;
            }
            set
            {
                POI poi = null;
                if (IsFromCase)
                    poi = CurrentPerson.POI;
                else
                    poi = (_isNew) ? CurrentNewPerson : ExistingOrgPerson;

                poi.Email = value;
            }
        }

        public string Home
        {
            get
            {
                if (IsFromCase)
                    return CurrentPerson.POI.HomePhoneDisplay;
                else
                    return (!_isNew) ? ExistingOrgPerson.HomePhoneDisplay : string.Empty;
            }
            set
            {
                POI poi = null;
                if (IsFromCase)
                    poi = CurrentPerson.POI;
                else
                    poi = (_isNew) ? CurrentNewPerson : ExistingOrgPerson;

                poi.Home = value;
            }
        }

        public string Cell
        {
            get
            {
                if (IsFromCase)
                    return CurrentPerson.POI.CellPhoneDisplay;
                else
                    return (!_isNew) ? ExistingOrgPerson.CellPhoneDisplay : string.Empty;
            }
            set
            {
                POI poi = null;
                if (IsFromCase)
                    poi = CurrentPerson.POI;
                else
                    poi = (_isNew) ? CurrentNewPerson : ExistingOrgPerson;

                poi.Cell = value;
            }
        }

        public POIType Type
        {
            get
            {
                if (IsFromCase)
                    return CurrentPerson.POI.Type;
                else
                    return (!_isNew) ? ExistingOrgPerson.Type : POIType.None;
            }
            set
            {
                POI poi = null;
                if (IsFromCase)
                    poi = CurrentPerson.POI;
                else
                    poi = (_isNew) ? CurrentNewPerson : ExistingOrgPerson;

                poi.Type = value;
            }
        }

        public string TypeDisplay
        {
            get 
            {
                if (IsFromCase)
                    return CurrentPerson.POI.TypeDisplay;

                return (_isNew) ? CurrentNewPerson.TypeDisplay : ExistingOrgPerson.TypeDisplay;
            }
        }

        private UIColor TypeTextColor
        {
            get 
            {
                if (IsFromCase)
                    return CurrentPerson.POI.TypeTextColor.AsUIColor();

                return (_isNew) ? CurrentNewPerson.TypeTextColor.AsUIColor() : ExistingOrgPerson.TypeTextColor.AsUIColor();
            }
        }

        private POI CurrentPOI
        {
            get
            {
                if (IsFromCase)
                    return CurrentPerson.POI;
                else
                    return (!_isNew) ? ExistingOrgPerson : CurrentNewPerson;
            }
        }

        public event EventHandler PersonSaved;
        private void OnPersonSaved()
        {
            if (PersonSaved != null)
                PersonSaved(this, EventArgs.Empty);
        }

        protected override void DelegateDispose()
        {
            base.DelegateDispose();

            ReleaseDesignerOutlets();
        }

		public PersonDetailViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            _isNew = (!IsFromCase) ? ExistingOrgPerson == null : false;

            if (IsFromCase)
                this.Title = $"Edit {CurrentPerson.POI.FullName}";
            else
                this.Title = (_isNew) ? $"Add New Org User" : $"Edit {ExistingOrgPerson.FullName}";

            DetailTableView.ContentInset = new UIEdgeInsets(0, 0, 0, 0);
            DetailTableView.WeakDelegate = this;
            DetailTableView.WeakDataSource = this;
            DetailTableView.TableFooterView = new UIView(CGRect.Empty);
            DetailTableView.ReloadData();

            _saveButtonItem = new UIBarButtonItem("Save", UIBarButtonItemStyle.Done, Save);
            NavigationItem.RightBarButtonItem = _saveButtonItem;

            var viewTap = new UITapGestureRecognizer(() => this.View.EndEditing(true));
            this.View.AddGestureRecognizer(viewTap);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            this.DismissToast();

            if (!APIHelper.HasInternetConnection)
            {
                this.ShowToast(this.View, Constants.OfflineMessage, indefinite: true);
            }
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
        }

        private async void Save(object sender, EventArgs e)
        {
            ShowWaitDialog("Saving...");

            if (IsFromCase)
            {
                var result = CurrentPerson.POI.Save();
                DismissWaitDialog();

                if (!result.Success)
                {
                    ShowError("Validation Error", result.Message);
                    return;
                }

                CurrentCase.UpdateExistingPerson(CurrentPerson);
                OnPersonSaved();
                this.NavigationController.PopViewController(true);
                return;
            }

            if (_isNew)
            {
                var result = await CurrentNewPerson.SaveAsync();
                DismissWaitDialog();
                if (!result.Result)
                {
                    ShowError("New Org User Error", result.Message);
                    return;
                }
            }
            else
            {
                var response = await ExistingOrgPerson.SaveAsync();
                DismissWaitDialog();

                if (!response.Result)
                {
                    ShowError("Org User Error", response.Message);
                    return;
                }
            }

            OnPersonSaved();
            this.NavigationController.PopViewController(true);
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == Segues.SegueToTypeSelector)
            {
                var typeVC = (POITypeViewController)segue.DestinationViewController;
                typeVC.SelectedType = this.Type;
                typeVC.TypeSelected += TypeVC_TypeSelected;
            }
        }

        private void TypeVC_TypeSelected(object sender, EventArgs e)
        {
            var typeVC = (POITypeViewController)sender;
            typeVC.TypeSelected -= TypeVC_TypeSelected;

            this.Type = typeVC.SelectedType;
            DetailTableView.ReloadRows(new NSIndexPath[] { NSIndexPath.FromRowSection((int)DetailRows.Type, 0) }, UITableViewRowAnimation.None);
        }

        #region TableView Overrides

        [Export("numberOfSectionsInTableView:")]
        public nint NumberOfSections(UITableView tableView)
        {
            return 1;
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return 6;
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            switch(indexPath.Row)
            {
                case (int)DetailRows.FirstName:
                    return EntryTextCell.Dequeue(this, tableView, Constants.PersonDetail.FirstNameLabelText, this.FirstName);
                case (int)DetailRows.LastName:
                    return EntryTextCell.Dequeue(this, tableView, Constants.PersonDetail.LastNameLabelText, this.LastName);
                case (int)DetailRows.Email:
                    return EntryTextCell.Dequeue(this, tableView, Constants.PersonDetail.EmailLabelText, this.Email, UIKeyboardType.EmailAddress);
                case (int)DetailRows.HomePhone:
                    return EntryTextCell.Dequeue(this, tableView, Constants.PersonDetail.HomePhoneTextLabel, this.Home, UIKeyboardType.PhonePad);
                case (int)DetailRows.CellPhone:
                    return EntryTextCell.Dequeue(this, tableView, Constants.PersonDetail.CellPhoneTextLabel, this.Cell, UIKeyboardType.PhonePad);
                case (int)DetailRows.Type:
                    var cell = SelectionCell.Dequeue(tableView, Constants.PersonDetail.TypeTextLabel, this.TypeDisplay, this.TypeTextColor);
                    var tap = new UITapGestureRecognizer(() => RowSelected(tableView, indexPath));
                    cell.AddGestureRecognizer(tap);
                    return cell;
            }

            return null;
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            tableView.DeselectRow(indexPath, true);
            this.View.EndEditing(true);

            if ((DetailRows)indexPath.Row == DetailRows.Type)
            {
                PerformSegue(Segues.SegueToTypeSelector, null);
            }
        }

        #endregion

        #region Keyboard Handling

        private void RegisterForKeyboardNotifications()
        {
            if (_keyboardShowObserver == null)
                _keyboardShowObserver = NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.WillShowNotification, OnKeyboardNotification);
            if (_keyboardHideObserver == null)
                _keyboardHideObserver = NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.WillHideNotification, OnKeyboardNotification);
        }

        private void UnregisterForKeyboardNotifications()
        {
            if (_keyboardShowObserver != null)
            {
                NSNotificationCenter.DefaultCenter.RemoveObserver(_keyboardShowObserver);
                _keyboardShowObserver.Dispose();
                _keyboardShowObserver = null;
            }

            if (_keyboardHideObserver != null)
            {
                NSNotificationCenter.DefaultCenter.RemoveObserver(_keyboardHideObserver);
                _keyboardHideObserver.Dispose();
                _keyboardHideObserver = null;
            }
        }

        private void OnKeyboardNotification(NSNotification notification)
        {
            //Check if the keyboard is becoming visible
            var visible = notification.Name == UIKeyboard.WillShowNotification;

            //Start an animation, using values from the keyboard
            UIView.BeginAnimations("AnimateForKeyboard");
            UIView.SetAnimationBeginsFromCurrentState(true);
            var animationDuration = UIKeyboard.AnimationDurationFromNotification(notification);
            UIView.SetAnimationDuration(animationDuration);
            UIView.SetAnimationCurve((UIViewAnimationCurve)UIKeyboard.AnimationCurveFromNotification(notification));

            var keyboardFrame = visible
                ? UIKeyboard.FrameEndFromNotification(notification)
                : UIKeyboard.FrameBeginFromNotification(notification);
            
            if (visible)
            {
                var viewFrame = this.View.Frame;
                var location = viewFrame.Location;
                location.Y = -130;
                viewFrame.Location = location;
                this.View.Frame = viewFrame;

                DetailTableView.ContentInset = new UIEdgeInsets(0, 0, keyboardFrame.Height / 2, 0);
            }
            else
            {
                var viewFrame = this.View.Frame;
                var location = viewFrame.Location;
                location.Y = 0;
                viewFrame.Location = location;
                this.View.Frame = viewFrame;

                DetailTableView.ContentInset = new UIEdgeInsets(0, 0, 0, 0);
            }

            UIView.Animate(animationDuration, () => this.View.LayoutIfNeeded());

            //Commit the animation
            UIView.CommitAnimations();
        }

        #endregion
    }
}