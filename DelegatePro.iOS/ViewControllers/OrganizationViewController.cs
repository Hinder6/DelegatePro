// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using CoreGraphics;
using DelegatePro.PCL;
using Foundation;
using UIKit;

namespace DelegatePro.iOS
{
    public partial class OrganizationViewController : BaseViewController,
        IUITableViewDelegate,
        IUITableViewDataSource
	{
        private UITapGestureRecognizer _tapGesture;
        private List<POI> _users;
        private POI _selectedUser;

        private UIBarButtonItem _addBarButton;
        private UIRefreshControl _refresh;

        private POIType _selectedFilterType = POIType.None;

		public OrganizationViewController (IntPtr handle) : base (handle)
		{
		}

        public override async void ViewDidLoad()
        {
            base.ViewDidLoad();

            _tapGesture = new UITapGestureRecognizer(() => ShowFilter());
            FilterBackgroundView.AddGestureRecognizer(_tapGesture);

            FilterLabel.TextColor = Constants.SelectorTextColor.AsUIColor();

            SetFilterText();

            await LoadUsers();

            _refresh = new UIRefreshControl();
            _refresh.BackgroundColor = UIColor.FromRGB(242, 242, 242);
            _refresh.ValueChanged += PullToRefresh;
            OrgTableView.AddSubview(_refresh);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            this.TabBarController.NavigationItem.Title = Constants.LandingPage.ViewTitle;

            if (_addBarButton == null)
                _addBarButton = new UIBarButtonItem(UIBarButtonSystemItem.Add, AddPerson);
            
            this.TabBarController.NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { _addBarButton };
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            this.TabBarController.NavigationItem.Title = string.Empty;

            if (segue.Identifier == Segues.SegueToNewEditUser)
            {
                var detail = (PersonDetailViewController)segue.DestinationViewController;

                if (_selectedUser != null)
                    detail.ExistingOrgPerson = _selectedUser;

                detail.PersonSaved += Detail_PersonSaved;
            }
            else if (segue.Identifier == Segues.SegueToTypeSelector)
            {
                var typeVC = (POITypeViewController)segue.DestinationViewController;
                typeVC.SelectedType = _selectedFilterType;
                typeVC.TypeSelected += TypeVC_TypeSelected;
                typeVC.ShowAll = true;
            }
        }

        private async void TypeVC_TypeSelected(object sender, EventArgs e)
        {
            var typeVC = (POITypeViewController)sender;
            typeVC.TypeSelected -= TypeVC_TypeSelected;

            _selectedFilterType = typeVC.SelectedType;

            SetFilterText();

            await LoadUsers();
        }

        private void ShowFilter()
        {
            this.PerformSegue(Segues.SegueToTypeSelector, null);
        }

        private void SetFilterText()
        {
            FilterLabel.Text = (_selectedFilterType != POIType.None) ? _selectedFilterType.ToString("G") : "All";
        }

        private async void PullToRefresh(object sender, EventArgs e)
        {
            _refresh.BeginRefreshing();

            await LoadUsers();

            _refresh.EndRefreshing();
        }

        private async Task LoadUsers()
        {
            ShowWaitDialog("Loading users...");

            var response = await POI.GetUsersAsync(_selectedFilterType);

            DismissWaitDialog();

            if (!response.Result)
            {
                ShowError("Users", response.Message);
                return;
            }

            _users = response.Data;
            _users = _users.OrderBy(t => t.LastName).ThenBy(t => t.FirstName).ToList();

            OrgTableView.WeakDelegate = this;
            OrgTableView.WeakDataSource = this;
            OrgTableView.EstimatedRowHeight = UITableView.AutomaticDimension;
            OrgTableView.TableFooterView = new UIView(CGRect.Empty);
            OrgTableView.ReloadData();
        }

        private async void Detail_PersonSaved(object sender, EventArgs e)
        {
            await LoadUsers();
        }

        private void AddPerson(object sender, EventArgs e)
        {
            _selectedUser = null;
            PerformSegue(Segues.SegueToNewEditUser, this);
        }

        [Export("numberOfSectionsInTableView:")]
        public nint NumberOfSections(UITableView tableView)
        {
            return 1;
        }

        private static string CellIdentifier = "cell";
        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell(CellIdentifier) ?? new UITableViewCell(UITableViewCellStyle.Subtitle, CellIdentifier);

            var user = _users[indexPath.Row];
            cell.TextLabel.Text = user.ToString();
            cell.DetailTextLabel.Text = user.TypeDisplay;

            return cell;
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return _users.Count;
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            tableView.DeselectRow(indexPath, true);
            _selectedUser = _users[indexPath.Row];
            _selectedUser.IsNew = false;
            PerformSegue(Segues.SegueToNewEditUser, this);
        }

        [Export("tableView:canEditRowAtIndexPath:")]
        public bool CanEditRow(UITableView tableView, NSIndexPath indexPath)
        {
            return true;
        }

        [Export("tableView:commitEditingStyle:forRowAtIndexPath:")]
        public async void CommitEditingStyle(UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath)
        {
            if (editingStyle == UITableViewCellEditingStyle.Delete)
            {
                var delete = await ShowYesNoMessage(Constants.POI.RemovePersonTitleText, Constants.POI.RemovePersonFromOrgText);

                if (!delete)
                    return;

                var person = _users[indexPath.Row];
                _users.Remove(person);
                await person.Delete();

                await LoadUsers();
            }
        }
	}
}
