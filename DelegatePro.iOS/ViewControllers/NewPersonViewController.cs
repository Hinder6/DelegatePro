// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using DelegatePro.PCL;
using Foundation;
using UIKit;

namespace DelegatePro.iOS
{
    public partial class NewPersonViewController : BaseContainerViewController, IUITextFieldDelegate
	{
        private POIType _selectedType;
        public POIType SelectedType 
        {
            get { return _selectedType; }
            set
            {
                _selectedType = value;
                TypeInputField.Text = _selectedType.ToString("G");
            }
        }

        private UIDatePicker _datePicker;

        private NSObject _keyboardShowObserver;

        public event EventHandler TypeClicked;
        private void OnTypeClicked()
        {
            TypeClicked?.Invoke(this, EventArgs.Empty);
        }

		public NewPersonViewController (IntPtr handle) : base (handle)
		{
		}

        protected override void DelegateDispose()
        {
            base.DelegateDispose();

            _datePicker.ValueChanged -= DatePickerValueChanged;

            if (_keyboardShowObserver != null)
            {
                NSNotificationCenter.DefaultCenter.RemoveObserver(_keyboardShowObserver);
                _keyboardShowObserver.Dispose();
                _keyboardShowObserver = null;
            }

            ReleaseDesignerOutlets();
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            SetDatePicker();

            if (_keyboardShowObserver == null)
                _keyboardShowObserver = NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.WillShowNotification, OnKeyboardNotification);

            SetTypePicker();

            SetConstraints();

            CellTextField.Delegate = this;
            PhoneTextField.Delegate = this;
        }

        [Export("textField:shouldChangeCharactersInRange:replacementString:")]
        public bool ShouldChangeCharacters(UITextField textField, NSRange range, string replacementString)
        {
            var text = textField.Text + ((replacementString != "\n") ? replacementString : string.Empty);
            if (string.IsNullOrEmpty(replacementString))
            {
                // deleting character
                text = text.Remove((int)range.Location, (int)range.Length);
            }

            if (replacementString.Length > 1)
            {
                // user pasted value or selected an autocorrect.
                text = replacementString;
            }

            var t = iOSHelpers.CleanPhoneFormatting(text);
            if (t.Length > 10)
                return false;

            var numberText = iOSHelpers.CleanPhoneFormatting(text);
            if (numberText.Length < 10)
                numberText = numberText.PadRight(10, ' ');

            if (!string.IsNullOrWhiteSpace(numberText) && numberText.Length <= 10)
                textField.Text = string.Format(Constants.PhoneNumberFormat, double.Parse(numberText));
            else if (string.IsNullOrWhiteSpace(numberText))
                textField.Text = "(   )   -    ";
            
            return false;
        }

        private void OnKeyboardNotification(NSNotification notification)
        {
            if (string.IsNullOrEmpty(SeniorityDateTextField.Text) && SeniorityDateTextField.IsFirstResponder)
                SeniorityDateTextField.Text = DateTime.Now.ToString("MM/dd/yyyy");

            if (SelectedType == POIType.None && TypeInputField.IsFirstResponder)
                SelectedType = POIType.Employee;
        }

        private void SetConstraints()
        {
            var leftMargin = 16f;
            var rightMargin = 16f;
            var marginFromCenter = 5f;
            var screenWidth = UIScreen.MainScreen.Bounds.Width;

            FirstNameWidthConstraint.Constant = (screenWidth / 2) - (leftMargin + marginFromCenter);
            CellWidthConstraint.Constant = (screenWidth / 2) - (leftMargin + marginFromCenter);
            LastNameWidthConstraint.Constant = (screenWidth / 2) - (rightMargin + marginFromCenter);
            PhoneWidthConstraint.Constant = (screenWidth / 2) - (rightMargin + marginFromCenter);
        }

        private void SetTypePicker()
        {
            var model = new ItemPickerModel<string>(POI.POITypes.Select(t => t.ToString("G")).ToList());
            model.ValueChanged += (object sender, EventArgs e) =>
            {
                SelectedType = (POIType)Enum.Parse(typeof(POIType), model.SelectedItem);
            };

            UIBarButtonItem doneButton = new UIBarButtonItem("Done", UIBarButtonItemStyle.Done, (s, e) =>
            {
                if (model.SelectedItem != null)
                {
                    SelectedType = (POIType)Enum.Parse(typeof(POIType), model.SelectedItem);
                }

                TypeInputField.ResignFirstResponder();
            });

            UIPickerView picker = new UIPickerView();
            picker.Model = model;
            picker.BackgroundColor = UIColor.White;

            UIToolbar toolbar = new UIToolbar
            {
                BarStyle = UIBarStyle.Default,
                Translucent = false
            };
            toolbar.SizeToFit();

            toolbar.SetItems(new UIBarButtonItem[] { doneButton }, true);

            TypeInputField.InputView = picker;
            TypeInputField.InputAccessoryView = toolbar;
        }

        private void SetDatePicker()
        {
            _datePicker = new UIDatePicker();
            _datePicker.BackgroundColor = UIColor.White;
            _datePicker.Date = NSDate.Now;
            _datePicker.Mode = UIDatePickerMode.Date;
            _datePicker.UserInteractionEnabled = true;
            _datePicker.ValueChanged += DatePickerValueChanged;

            UIToolbar toolbar = new UIToolbar();
            toolbar.BarStyle = UIBarStyle.Default;
            toolbar.Translucent = false;
            toolbar.SizeToFit();

            UIBarButtonItem doneButton = new UIBarButtonItem("Done", UIBarButtonItemStyle.Done, (s, e) =>
            {
                if (_datePicker.Date != null)
                    SeniorityDateTextField.Text = _datePicker.Date.ToDateTime().ToString("MM/dd/yyyy");

                SeniorityDateTextField.ResignFirstResponder();
            });

            toolbar.SetItems(new UIBarButtonItem[] { doneButton }, true);

            SeniorityDateTextField.InputView = _datePicker;
            SeniorityDateTextField.InputAccessoryView = toolbar;
        }

        private void DatePickerValueChanged(object sender, EventArgs e)
        {
            var picker = (UIDatePicker)sender;
            SeniorityDateTextField.Text = picker.Date.ToDateTime().ToString("MM/dd/yyyy");
        }

        public POI GetNewPOI()
        {
            var dateTime = DateTime.MinValue;
            if (!DateTime.TryParse(SeniorityDateTextField.Text, out dateTime))
            {
                ShowError("New POI Error", "Seniority Date is required.");
                return null;
            }

            var poi = new POI
            {
                ID = Guid.NewGuid(),
                FirstName = FirstNameTextField.Text.Trim(),
                LastName = LastNameTextField.Text.Trim(),
                Cell = iOSHelpers.CleanPhoneFormatting(CellTextField.Text),
                Home = iOSHelpers.CleanPhoneFormatting(PhoneTextField.Text),
                Email = EmailTextField.Text.Trim(),
                Type = SelectedType,
                SeniorityDate = DateTime.Parse(SeniorityDateTextField.Text)
            };

            var result = poi.Validate();
            if (!result.IsValid)
            {
                ShowError("New POI Error", result.Message);
                return null;
            }

            return poi;
        }

        public void ClearValues()
        {
            var textFields = this.View.Subviews.OfType<UITextField>();
            foreach(var tf in textFields)
            {
                tf.Text = string.Empty;
            }

            _selectedType = POIType.None;
        }
	}
}
