// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Collections.Generic;
using CoreGraphics;
using DelegatePro.PCL;
using Foundation;
using UIKit;
using System.Threading.Tasks;

namespace DelegatePro.iOS
{
    public enum CasePersonnelMode
    {
        New,
        Existing
    }

    public partial class CasePersonnelViewController : BaseViewController
	{
        public Case CurrentCase { get; set; }

        private CasePersonnelMode _currentMode = CasePersonnelMode.Existing;

        private List<POI> _existingOrgUsers = new List<POI>();
        private List<CasePOI> _existingCasePersons;
        private List<CasePOI> _activeCasePersons;

        private List<POI> ExistingCasePOIs
        {
            get { return _existingCasePersons?.Select(t => t.POI).ToList(); }
        }

        private UIBarButtonItem _addBarButton;
        private ExistingPersonTableViewSource _existingOrgSource;
        private ExistingCasePersonTableViewSource _existingCaseSource;

        private WeakReference _newPersonVC;
        private NewPersonViewController NewPersonVC
        {
            get { return (NewPersonViewController)_newPersonVC.Target; }
            set { _newPersonVC = new WeakReference(value); }
        }

        private UITapGestureRecognizer _tapGesture;

        private NSObject _keyboardShowObserver;
        private NSObject _keyboardHideObserver;

        private POI _selectedOrgPerson;
        private CasePOI _selectedCasePerson;

        public event EventHandler ViewClosed;
        private void OnViewClosed()
        {
            ViewClosed?.Invoke(this, EventArgs.Empty);
        }

        protected override void DelegateDispose()
        {
            base.DelegateDispose();

            NewExistingSegment.ValueChanged -= NewExistingSegment_ValueChanged;
            NewPersonVC.TypeClicked -= NewPersonVC_TypeClicked;

            ReleaseDesignerOutlets();

            OnViewClosed();
        }

		public CasePersonnelViewController (IntPtr handle) : base (handle)
		{
		}

        public override async void ViewDidLoad()
        {
            base.ViewDidLoad();

            UpdatePersonnelUI();

            await UpdateOrgUsers();
            UpdatePersonsList();

            _existingOrgUsers = _existingOrgUsers.Except(ExistingCasePOIs).ToList();

            _tapGesture = new UITapGestureRecognizer(() => this.View.EndEditing(true));
            //this.View.AddGestureRecognizer(_tapGesture);

            NewExistingSegment.ValueChanged += NewExistingSegment_ValueChanged;

            _existingOrgSource = new ExistingPersonTableViewSource(_existingOrgUsers);
            _existingOrgSource.PersonSelected += OrgPersonSelected;
            _existingCaseSource = new ExistingCasePersonTableViewSource(_activeCasePersons);
            _existingCaseSource.PersonSelected += CasePersonSelected;
            _existingCaseSource.PersonDeleted += CasePersonDeleted;

            CasePersonnelTableView.TableFooterView = new UIView(CGRect.Empty);
            CasePersonnelTableView.Source = _existingCaseSource;
            CasePersonnelTableView.EstimatedRowHeight = UITableView.AutomaticDimension;
            CasePersonnelTableView.ReloadData();

            ExistingPersonTableView.TableFooterView = new UIView(CGRect.Empty);
            ExistingPersonTableView.Source = _existingOrgSource;
            ExistingPersonTableView.EstimatedRowHeight = UITableView.AutomaticDimension;
            ExistingPersonTableView.ReloadData();

            _addBarButton = new UIBarButtonItem("Add", UIBarButtonItemStyle.Done, AddButtonClicked);
            this.NavigationItem.RightBarButtonItem = _addBarButton;

            AllOrgUsersAssignedLabel.Hidden = _existingOrgUsers.Count != 0;
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == Segues.SegueToNewEditUser)
            {
                var detailVC = (PersonDetailViewController)segue.DestinationViewController;
                detailVC.CurrentPerson = _selectedCasePerson;
                detailVC.CurrentCase = CurrentCase;
                detailVC.PersonSaved += CasePersonEdited;
            }
            else if (segue.Identifier == Segues.EmbedNewPerson)
            {
                NewPersonVC = (NewPersonViewController)segue.DestinationViewController;
                NewPersonVC.TypeClicked += NewPersonVC_TypeClicked;
            }
            else if (segue.Identifier == Segues.SegueToTypeSelector)
            {
                var typeVC = (POITypeViewController)segue.DestinationViewController;
                typeVC.SelectedType = NewPersonVC.SelectedType;
                typeVC.TypeSelected += TypeSelected;
            }
        }

        private void TypeSelected(object sender, EventArgs e)
        {
            var typeVC = (POITypeViewController)sender;
            typeVC.TypeSelected -= TypeSelected;

            NewPersonVC.SelectedType = typeVC.SelectedType;
        }

        private void NewPersonVC_TypeClicked(object sender, EventArgs e)
        {
            PerformSegue(Segues.SegueToTypeSelector, null);
        }

        private void CasePersonEdited(object sender, EventArgs e)
        {
            var view = ((PersonDetailViewController)sender);
            view.PersonSaved -= CasePersonEdited;

            UpdatePersonsList();
            _existingCaseSource.UpdateItems(_activeCasePersons);
            CasePersonnelTableView.ReloadData();
        }

        private void OrgPersonSelected(object sender, EventArgs e)
        {
            var selectedPerson = ((ExistingPersonTableViewSource)sender).SelectedPerson;
            if (_selectedOrgPerson == null || _selectedOrgPerson != selectedPerson)
            {
                _selectedOrgPerson = selectedPerson; 
            }
            else if (_selectedOrgPerson == selectedPerson)
            {
                _selectedOrgPerson = null;
            }
        }

        private void CasePersonSelected(object sender, EventArgs e)
        {
            _selectedCasePerson = ((ExistingCasePersonTableViewSource)sender).SelectedCasePOI;
            PerformSegue(Segues.SegueToNewEditUser, null);
        }

        private async void CasePersonDeleted(object sender, EventArgs e)
        {
            var personDeleted = ((ExistingCasePersonTableViewSource)sender).DeletedCasePOI;

            var delete = await ShowYesNoMessage(Constants.POI.RemovePersonTitleText, Constants.POI.RemovePersonFromCaseText);
            if (!delete)
                return;

            CurrentCase.RemovePerson(personDeleted);

            UpdatePersonsList();
            _existingCaseSource.UpdateItems(_activeCasePersons);
            CasePersonnelTableView.ReloadData();

            _existingOrgUsers.Add(personDeleted.POI);
            UpdateExistingOrgUsers();
        }

        private void AddButtonClicked(object sender, EventArgs e)
        {
            if (_currentMode == CasePersonnelMode.Existing)
            {
                if (_selectedOrgPerson == null)
                {
                    ShowError("No User Selected", "Please select an organization user to add and try again.");
                    return;
                }

                var casePOI = CasePOI.Create(_selectedOrgPerson.ID, CurrentCase.ID);
                CurrentCase.AddExistingPerson(casePOI);

                this.ShowToast($"{_selectedOrgPerson.FullName} added to case.");
                _selectedOrgPerson = null;
            }
            else 
            {
                var addPOI = NewPersonVC.GetNewPOI();
                if (addPOI == null) // validation error in VC
                    return;

                addPOI.Save();
                var casePOI = CasePOI.Create(addPOI.ID);
                CurrentCase.AddNewPerson(casePOI);

                NewPersonVC.ClearValues();
                this.ShowToast($"{addPOI.FullName} added to case.");
            }

            UpdatePersonsList();
            _existingCaseSource.UpdateItems(_activeCasePersons);
            CasePersonnelTableView.ReloadData();

            UpdateExistingOrgUsers();
        }

        private void UpdatePersonsList()
        {
            _existingCasePersons = CurrentCase.AllPeopleInvolved;
            _activeCasePersons = _existingCasePersons.Where(t => !t.IsDeleted).ToList();

            NoPeopleLabel.Hidden = _activeCasePersons.Count > 0;
        }

        private void NewExistingSegment_ValueChanged(object sender, EventArgs e)
        {
            _currentMode = (_currentMode == CasePersonnelMode.Existing) ? CasePersonnelMode.New : CasePersonnelMode.Existing;

            UpdatePersonnelUI();
        }

        private void UpdatePersonnelUI()
        {
            ExistingPersonTableView.Hidden = _currentMode != CasePersonnelMode.Existing;
            NewPersonContainerView.Hidden = _currentMode != CasePersonnelMode.New;
        }

        private void UpdateExistingOrgUsers()
        {
            _existingOrgUsers = _existingOrgUsers.Except(ExistingCasePOIs).ToList();
            _existingOrgSource.UpdateItems(_existingOrgUsers);
            ExistingPersonTableView.ReloadData();

            AllOrgUsersAssignedLabel.Hidden = _existingOrgUsers.Count != 0;
        }

        private async Task UpdateOrgUsers()
        {
            ShowWaitDialog("Loading organization users...");

            var response = await POI.GetUsersAsync();

            DismissWaitDialog();

            if (!response.Result)
            {
                ShowError("Org Users", response.Message);
                return;
            }

            _existingOrgUsers = response.Data;
        }
	}

    public class ExistingPersonTableViewSource : UITableViewSource
    {
        private List<POI> _existingOrgUsers;

        public POI SelectedPerson { get; private set;}

        public event EventHandler PersonSelected;
        private void OnPersonSelected(POI person)
        {
            SelectedPerson = person;
            PersonSelected?.Invoke(this, EventArgs.Empty);
        }

        public ExistingPersonTableViewSource(List<POI> orgUsers)
        {
            _existingOrgUsers = orgUsers;
        }

        public void UpdateItems(List<POI> orgUsers)
        {
            _existingOrgUsers = orgUsers;
            _selectedIndexPath = null;
        }

        private const string CellIdentifier = "Cell";
        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell(CellIdentifier);
            cell = cell ?? new UITableViewCell(UITableViewCellStyle.Subtitle, CellIdentifier);

            var person = _existingOrgUsers[indexPath.Row];
            cell.TextLabel.Text = person.ToString();
            cell.DetailTextLabel.Text = person.TypeDisplay;
            cell.Accessory = UITableViewCellAccessory.None;

            if (_selectedIndexPath != null && indexPath.Row == _selectedIndexPath.Row)
            {
                cell.Accessory = UITableViewCellAccessory.Checkmark;
                tableView.SelectRow(indexPath, true, UITableViewScrollPosition.None);
            }

            return cell;
        }

        private NSIndexPath _selectedIndexPath;
        public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            if (_selectedIndexPath == null)
            {
                _selectedIndexPath = indexPath;
            }
            else if (_selectedIndexPath != null && _selectedIndexPath.Row != indexPath.Row)
            {
                var oldPath = _selectedIndexPath;
                _selectedIndexPath = null;
                tableView.ReloadRows(new[] { oldPath }, UITableViewRowAnimation.None);
                _selectedIndexPath = indexPath;
            }

            tableView.ReloadRows(new[] { indexPath }, UITableViewRowAnimation.None);
            OnPersonSelected(_existingOrgUsers[indexPath.Row]);
        }

        public override nint RowsInSection(UITableView tableview, nint section)
        {
            return _existingOrgUsers.Count;
        }
    }

    public class ExistingCasePersonTableViewSource : UITableViewSource
    {
        private List<CasePOI> _existingCasePersons;

        public CasePOI SelectedCasePOI { get; private set; }
        public CasePOI DeletedCasePOI { get; private set; }

        public event EventHandler PersonSelected;
        private void OnPersonSelected(CasePOI poi)
        {
            SelectedCasePOI = poi;
            PersonSelected?.Invoke(this, EventArgs.Empty);
        }

        public event EventHandler PersonDeleted;
        private void OnPersonDeleted(CasePOI poi)
        {
            DeletedCasePOI = poi;
            PersonDeleted?.Invoke(this, EventArgs.Empty);
        }

        public ExistingCasePersonTableViewSource(List<CasePOI> casePersons)
        {
            _existingCasePersons = casePersons;
        }

        public void UpdateItems(List<CasePOI> casePersons)
        {
            _existingCasePersons = casePersons;
        }

        private const string CellIdentifier = "Cell";
        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell(CellIdentifier);
            cell = cell ?? new UITableViewCell(UITableViewCellStyle.Subtitle, CellIdentifier);

            var person = _existingCasePersons[indexPath.Row];
            cell.TextLabel.Text = person.POI.ToString();
            cell.DetailTextLabel.Text = person.POI.TypeDisplay;

            return cell;
        }

        public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            tableView.DeselectRow(indexPath, true);
            OnPersonSelected(_existingCasePersons[indexPath.Row]);
        }

        public override nint RowsInSection(UITableView tableview, nint section)
        {
            return _existingCasePersons.Count;
        }

        public override bool CanEditRow(UITableView tableView, NSIndexPath indexPath)
        {
            return true;
        }

        public override void CommitEditingStyle(UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath)
        {
            if (editingStyle == UITableViewCellEditingStyle.Delete)
            {
                OnPersonDeleted(_existingCasePersons[indexPath.Row]);
            }
        }
    }
}
